{"version":3,"file":"ng-simple-table.js.map","sources":["ng://ng-simple-table/lib/ng-simple-table.service.ts","ng://ng-simple-table/lib/ng-simple-table.component.ts","ng://ng-simple-table/lib/ng-simple-table.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgSimpleTableService {\n\n  constructor() { }\n}\n","import { Component, Input, Output, OnInit, EventEmitter} from '@angular/core';\nimport { MetaData } from './interfaces';\n\n@Component({\n  selector: 'smt-ng-simple-table',\n  template: `<div class=\"table-wrapper\">\n  <table class=\"table\">\n    <thead>\n    <tr>\n      <th *ngFor=\"let column of columns\" class=\"{{column.withSorting ? '':'no-sort'}}\" width=\"{{column.width ? column.width:'auto'}}\" [ngClass]=\"getColumnClass(column)\">\n        {{ column.titleKey }}\n        <div *ngIf=\"column.withSorting\" class=\"sorting-btn-block\">\n          <button class=\"sort-btn\" (click)=\"sortColumn(column, 1)\"><i class=\"fa fa-sort-up\"></i></button>\n          <button class=\"sort-btn\" (click)=\"sortColumn(column, 0)\"><i class=\"fa fa-sort-down\"></i></button>\n        </div>\n      </th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let row of list\">\n      <td *ngFor=\"let column of columns\">\n        <div (click)=\"selectRow(row)\">{{column.rowKey && row[column.rowKey]}}</div>\n        <div class=\"action-btns-block\" *ngIf=\"column.withActionCol\">\n          <button (click)=\"view(row)\" class=\"btn btn-view\"><i class=\"fa fa-search\"></i></button>\n          <button (click)=\"edit(row)\" class=\"btn btn-edit\"><i class=\"fa fa-edit\"></i></button>\n          <button (click)=\"delete(row)\" *ngIf=\"!column.hideDeleteBtn\" class=\"btn btn-delete\"><i class=\"fa fa-trash\"></i></button>\n        </div>\n        <div *ngIf=\"column.withSelectionCol\">\n          <input type=\"checkbox\" (change)=\"toggleCheckbox(row)\" [disabled]=\"row.checkbox_disabled\" [checked]=\"row.checkbox_checked\"/>\n        </div>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n\n<div *ngIf=\"pagination\" class=\"pagination-wrap\">\n  <!--<div class=\"pagination-result\">{{meta?.currentPage}} / {{meta?.pagesCount}}</div>-->\n  <div class=\"per-page-btns\">\n    <button (click)=\"itemsPerPage(10)\"  [class]=\"meta.perPage === 10 ? 'active': ''\">10</button>\n    <button (click)=\"itemsPerPage(25)\"  [class]=\"meta.perPage === 25 ? 'active': ''\">25</button>\n    <button (click)=\"itemsPerPage(50)\"  [class]=\"meta.perPage === 50 ? 'active': ''\">50</button>\n    <button (click)=\"itemsPerPage(100)\"  [class]=\"meta.perPage === 100 ? 'active': ''\">100</button>\n  </div>\n  <div class=\"paging_simple_numbers\">\n    <ul class=\"pagination\">\n      <button class=\"page-link\" [disabled]=\"meta.currentPage === 1\" (click)=\"turnPage((meta.currentPage - 1) * -1)\"> â®â® </button>\n      <button class=\"page-link\" [disabled]=\"meta.currentPage === 1\" (click)=\"turnPage(-1)\"><span class=\"pagination-default\">â®</span></button>\n      <button class=\"page-link numbers\" [disabled]=\"true\"> {{meta.currentPage}} </button>\n      <button class=\"page-link\" [disabled]=\"meta.currentPage === meta.pagesCount\" (click)=\"turnPage(1)\"><span class=\"pagination-default\">â¯</span></button>\n      <button class=\"page-link\" [disabled]=\"meta.currentPage === meta.pagesCount\" (click)=\"turnPage(meta.pagesCount - meta.currentPage)\"> â¯â¯ </button>\n    </ul>\n  </div>\n</div>\n\n<div class=\"alert-modal choice-modal\" *ngIf=\"showConformationModal\">\n  <p>{{'operation-modal.question'}}?</p>\n  <button class=\"btn-accept\" (click)=\"this.handleDelete.emit(itemID_for_deleting); showConformationModal = false\">Yes</button>\n  <button class=\"btn-cancel\" (click)=\"itemID_for_deleting = null; showConformationModal = false\">No</button>\n  <div class=\"overlay\"></div>\n</div>\n`,\n  styles: [``]\n})\nexport class NgSimpleTableComponent implements OnInit {\n\n  constructor() {}\n\n  private _show_pagination = true;\n  private _columns: any[] = [];\n  private _list: any[] = [];\n  private _sort: any[] = [];\n  private _meta: MetaData = {\n    currentPage: 0,\n    nextPage: 0,\n    pagesCount: 0,\n    perPage: 0,\n    prevPage: 0,\n    totalCount: 0\n  };\n  private _showConformationModal: boolean;\n  itemID_for_deleting: any = null;\n\n  @Input()\n  paginationState: boolean;\n\n  @Input()\n  set columns(columns: any[]) {\n    if (columns && Array.isArray(columns)) {\n      this._columns = columns;\n    }\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input()\n  set list(list: any[]) {\n    if (list && Array.isArray(list)) {\n      this._list = list;\n    }\n  }\n\n  get list(): any[] {\n    return this._list;\n  }\n\n  @Input('meta')\n  set meta(meta: MetaData) {\n    if (meta) {\n      this._meta = meta;\n    }\n  }\n\n  get meta(): MetaData {\n    return this._meta;\n  }\n\n  set pagination(value) {\n    this._show_pagination = value;\n  }\n\n  get pagination() {\n    return this._show_pagination;\n  }\n\n  @Output()\n  handleView = new EventEmitter<any>();\n  @Output()\n  handleEdit = new EventEmitter<any>();\n  @Output()\n  handleDelete = new EventEmitter<any>();\n  @Output()\n  handleSorting = new EventEmitter<any>();\n  @Output()\n  handleTurnPage = new EventEmitter<any>();\n  @Output()\n  handleSelectRow = new EventEmitter<any>();\n  @Output()\n  handleToggleCheckBox = new EventEmitter<any>();\n  @Output()\n  handleChangeItemsPerPage = new EventEmitter<any>();\n\n  set sort(sort: any[]) {\n    if (sort && Array.isArray(sort)) {\n      this._sort = sort;\n    }\n  }\n\n  get sort(): any[] {\n    return this._sort;\n  }\n\n  set showConformationModal(value) {\n    this._showConformationModal = value;\n  }\n\n  get showConformationModal(): any {\n    return this._showConformationModal;\n  }\n\n  ngOnInit() {\n    if (this.paginationState === false) {\n      this.pagination = false;\n    }\n  }\n\n  view(row) {\n    this.handleView.emit(row.id);\n  }\n\n  edit(row) {\n    this.handleEdit.emit(row.id);\n  }\n\n  delete(row) {\n    this.showConformationModal = true;\n    this.itemID_for_deleting = row.id;\n  }\n\n  sortColumn(column, type) {\n    const sortParamSet = this.sort.some(\n      el => el.field === column.sortKey || el.field === column.rowKey\n    );\n    if (sortParamSet) {\n      this.sort = this.sort.map(el => {\n        if (el.id === column.id) {\n          return {\n            ...el,\n            type\n          };\n        }\n        return el;\n      });\n    } else {\n      this.sort = [\n        ...this.sort,\n        { field: column.sortKey ? column.sortKey : column.rowKey, type }\n      ];\n    }\n    this.handleSorting.emit(this.sort);\n  }\n\n  turnPage(index) {\n    const nextPage = this.meta.currentPage + index;\n    this.handleTurnPage.emit(nextPage);\n  }\n\n  selectRow(item) {\n    this.handleSelectRow.emit(item);\n  }\n\n  toggleCheckbox(item) {\n    this.handleToggleCheckBox.emit(item);\n  }\n\n  itemsPerPage(count) {\n    this.handleChangeItemsPerPage.emit(count);\n  }\n  getColumnClass(column) {\n    const item = this.sort.find(\n      i => i.field === column.sortKey || i.field === column.rowKey\n    );\n    if (item) {\n      if (item.type === 1) {\n        return 'sort-up';\n      } else {\n        return 'sort-down';\n      }\n    }\n    return '';\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgSimpleTableComponent } from './ng-simple-table.component';\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [NgSimpleTableComponent],\n  exports: [NgSimpleTableComponent]\n})\nexport class NgSimpleTableModule { }\n"],"names":[],"mappings":"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"}
